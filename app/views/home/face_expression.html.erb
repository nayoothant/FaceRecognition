

  <div id="display">
    <video id="video" width="720" height="560" autoplay muted></video>
  </div>
  <br>
  <p>
    <%= link_to "Go to see image Recognition",home_image_recognition_path(), id: "video_close" %>
  </p>
<script>
const expression = document.getElementById('video')
  Promise.all([
  faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
  faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
  faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
  faceapi.nets.faceExpressionNet.loadFromUri('/models')
]).then(startVideo)

function startVideo() {
  navigator.getUserMedia(
    { video: {} },
    stream => video.srcObject = stream,
    err => console.error(err)
  )
}
const reloadUsingLocationHash = () => {    
if (!localStorage.getItem('reload')) {
        localStorage['reload'] = true;
        window.location.reload();
    } else {
        localStorage.removeItem('reload');
    }     
}
window.onload = reloadUsingLocationHash();

expression.addEventListener('play', () => {
  const canvas = faceapi.createCanvasFromMedia(expression)
  document.getElementById('display').append(canvas)
  const displaySize = { width: expression.width, height: expression.height }
  faceapi.matchDimensions(canvas, displaySize)
  setInterval(async () => {
    const detections = await faceapi.detectAllFaces(expression, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions()
    const resizedDetections = faceapi.resizeResults(detections, displaySize)
    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)
    faceapi.draw.drawDetections(canvas, resizedDetections)
    faceapi.draw.drawFaceLandmarks(canvas, resizedDetections)
    faceapi.draw.drawFaceExpressions(canvas, resizedDetections)
  }, 100)
})

video_close.addEventListener('click', function(ev) {
    video.srcObject.getTracks().forEach(function(track) {
        track.stop();
    });
}, false);
</script>